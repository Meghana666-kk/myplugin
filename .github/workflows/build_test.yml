name: Build and Test NetworkManager

on:
  push:
    branches: [ main, develop, 'release/**', 'hotfix/**', 'feature/**'] 
  pull_request:
    branches: [ main, develop, 'release/**', 'hotfix/**', 'feature/**'] 

env:
  THUNDER_REF: "R4.4.1"

jobs:
  build-and-test:
    name: Build and test NetworkManager
    runs-on: ubuntu-22.04
    steps:
      - name: Install packages
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libnm0 git pkg-config ninja-build \
          libusb-1.0-0-dev zlib1g-dev libssl-dev libcurl4-openssl-dev libglib2.0-dev \
          libnm-dev uuid-dev libgupnp-1.2-dev libgssdp-1.2-dev \
          libsoup2.4-dev
      
      - name: Configure Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      
      - name: Install Python dependencies
        run: pip install jsonref
      
      - name: Clone Thunder repositories
        run: |
          git clone https://github.com/rdkcentral/ThunderTools.git -b ${{ env.THUNDER_REF }}
          git clone https://github.com/rdkcentral/Thunder.git -b ${{ env.THUNDER_REF }}
      
      - name: Checkout NetworkManager
        uses: actions/checkout@v3
        with:
          repository: Meghana666-kk/networkmanager
          path: networkmanager

      - name: Checkout MyPlugin
        uses: actions/checkout@v3
        with:
          repository: Meghana666-kk/myplugin
          path: myplugin

      - name: Debug Directory Structure
        run: |
              pwd
              ls -la
              find . -type d -name "myplugin" -o -name "MyPlugin"
      
      - name: Build ThunderTools
        run: |
          cmake -G Ninja -S ThunderTools -B build/ThunderTools -DCMAKE_INSTALL_PREFIX="${{github.workspace}}/install/usr"
          cmake --build build/ThunderTools --target install -j$(nproc)
      
      - name: Build Thunder
        run: |
          cmake -G Ninja -S Thunder -B build/Thunder \
          -DBUILD_SHARED_LIBS=ON \
          -DBINDING="127.0.0.1" \
          -DCMAKE_BUILD_TYPE="Debug" \
          -DCMAKE_INSTALL_PREFIX="${{github.workspace}}/install/usr" \
          -DCMAKE_MODULE_PATH="${{github.workspace}}/install/usr/include/WPEFramework/Modules" \
          -DDATA_PATH="${{github.workspace}}/install/usr/share/WPEFramework" \
          -DPERSISTENT_PATH="${{github.workspace}}/install/var/wpeframework" \
          -DPORT="9998" \
          -DPROXYSTUB_PATH="${{github.workspace}}/install/usr/lib/wpeframework/proxystubs" \
          -DSYSTEM_PATH="${{github.workspace}}/install/usr/lib/wpeframework/plugins" \
          -DVOLATILE_PATH="tmp"
          cmake --build build/Thunder --target install -j$(nproc)
      
      - name: Build NetworkManager
        run: |
          cmake -S networkmanager -B build/networkmanager \
          -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/install/usr \
          -DCMAKE_MODULE_PATH=${{github.workspace}}/install/tools/cmake \
          -DENABLE_PLUGIN_CLI=OFF \
          -DENABLE_GNOME_GDBUS=OFF \
          -DENABLE_GNOME_NETWORKMANAGER=ON
          cmake --build build/networkmanager --target install -j$(nproc)

      - name: Build MyPlugin
        run: |
          cmake -S myplugin/MyPlugin -B build/myplugin \
          -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/install/usr \
          -DCMAKE_MODULE_PATH=${{github.workspace}}/install/usr/include/WPEFramework/Modules
          cmake --build build/myplugin --target install -j$(nproc)
      
      - name: Run Tests
        run: |
          export LD_LIBRARY_PATH=${{github.workspace}}/install/usr/lib:${LD_LIBRARY_PATH}
          export PATH=${{github.workspace}}/install/usr/bin:${PATH}
          
          # Run libnm CLI test if available
          if [ -f "${{github.workspace}}/install/usr/bin/nmPluginLibnmCli" ]; then
            echo "Running nmPluginLibnmCli test..."
            ${{github.workspace}}/install/usr/bin/nmPluginLibnmCli
          fi
          
          # Alternatively run gdbus CLI test if available
          if [ -f "${{github.workspace}}/install/usr/bin/nmPluginGdbusCli" ]; then
            echo "Running nmPluginGdbusCli test..."
            ${{github.workspace}}/install/usr/bin/nmPluginGdbusCli
          fi
